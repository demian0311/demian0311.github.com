<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>neidetcher.com</title>
 <link href="http://neidetcher.com/programming-atom.xml" rel="self"/>
 <link href="http://neidetcher.com/"/>
 <updated>2014-07-03T13:30:54-05:00</updated>
 <id>http://neidetcher.com</id>
 <author>
   <name>Demian Neidetcher</name>
   <email>demian0311@gmail.com</email>
 </author>

 
 <entry>
   <title>Just Enough Rrdtool</title>
   <link href="http://neidetcher.com/programming/2014/05/13/just-enough-rrdtool.html"/>
   <updated>2014-05-13T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2014/05/13/just-enough-rrdtool</id>
   <content type="html">&lt;h2&gt;DevOps&lt;/h2&gt;

&lt;p&gt;If you get into devops you will run into &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/&quot;&gt;RRDB&lt;/a&gt;.  RRDB stands
for Round Robin DataBase.  It&amp;#39;s a file that you set up with a fixed size based on 
what you tell it you want to store and how you want to retain that information.  The
consistent file size is important because even if the system you&amp;#39;re tracking runs out of
disk space, your RRDB won&amp;#39;t ask for more room.  The tooling around it doesn&amp;#39;t use temp 
files or anything so your monitoring will all continue to work.  &lt;/p&gt;

&lt;p&gt;At work some of my more motivated co-workers have stood up an instance of &lt;a href=&quot;http://graphite.wikidot.com/&quot;&gt;Graphite&lt;/a&gt;.  Graphite
leverages RRDB to accept monitoring information and turn it into data and graphs that you can
render based on what you want to see.  &lt;/p&gt;

&lt;p&gt;Recently I&amp;#39;ve been working on a talk that I&amp;#39;ve been giving that touches on devops.  In the talk I 
have live demos for &lt;a href=&quot;https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern&quot;&gt;Circuit Breakers&lt;/a&gt; (using the &lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;Hystrix&lt;/a&gt; project from &lt;a href=&quot;http://www.netflix.com/&quot;&gt;Netflix&lt;/a&gt;).  But
I didn&amp;#39;t have a compelling demonstration on how to turn data, logs or metrics into graphs.  Graphite 
and other tooling seemed too heavy for a little demo during a talk.  That and I 
thought it&amp;#39;d be too heavy-weight for someone to play with right away.  So I decided to use
simple &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/&quot;&gt;RRDtool&lt;/a&gt; to work with RRDB files in a shell script.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll refine my use of RRDB later to do something live on a local system.  But I wanted something
that was gathering real data from a running system to show off.  That way I didn&amp;#39;t have to 
think about how to create synthetic data.&lt;/p&gt;

&lt;h2&gt;My Little Example&lt;/h2&gt;

&lt;p&gt;My site is running on a &lt;a href=&quot;http://www.rackspace.com/&quot;&gt;RackSpace&lt;/a&gt; virtual machine.  My web server is &lt;a href=&quot;http://wiki.nginx.org/Main&quot;&gt;NGINX&lt;/a&gt;.  I&amp;#39;m going to show
how to get &lt;em&gt;very rough&lt;/em&gt; information out of my NGINX logs and turn that into pictures.&lt;/p&gt;

&lt;p&gt;You can go to the &lt;a href=&quot;https://gist.github.com/demian0311/fc5b45cc901d36889b5e&quot;&gt;full script in a gist&lt;/a&gt; but we&amp;#39;ll walk through each section of a shell script.  It seemed
to make sense to me to put all these things together in one
script.  &lt;/p&gt;

&lt;p&gt;Here we just define variables.
&lt;code&gt;
name=neidetcher_access
rrdfile=&amp;quot;/var/local/${name}.rrd&amp;quot;
imageDir=&amp;quot;/home/demian/code/demian0311.github.com/_site&amp;quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Create an RRDB&lt;/h3&gt;

&lt;p&gt;Before you get going you need to set up an RRDB.  The &lt;code&gt;--step 60&lt;/code&gt; says 
we want to store things in 60 second increments.  We also tell it about
a data source that&amp;#39;s a GAUGE.  If anything comes in after 120 seconds then
we want to discard it.  And good values will be between 0 and 1000000.  We
also say that we want to keep around an average of the last hour and an
average of the last 24 hours.  rrdtool will take care of averaging all the
updates it gets into nice averages that we can later graph.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;rrdtool create $rrdfile --step 60 \
   &amp;quot;DS:${name}:GAUGE:120:0:1000000&amp;quot; \
   &amp;quot;RRA:AVERAGE:0:1:60&amp;quot; \
   &amp;quot;RRA:AVERAGE:0:60:24&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, to do this step in my script I would run this one time to set things up:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;root@raven:~/bin# ./neidetcher_access_log.sh create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Logtail &amp;amp; rrdtool update&lt;/h3&gt;

&lt;p&gt;Here we use logtail.  I have to admit up until 6 months ago I didn&amp;#39;t even 
know logtail was a thing but it&amp;#39;s pretty cool.  It reads a log file and 
keeps track of how far it got last time.  Then the next time you run it,
it&amp;#39;ll start from that position.  It has smarts like knowing what the 
inode is of the file.  So if the file has been replaced it&amp;#39;ll start over
at the top.&lt;/p&gt;

&lt;p&gt;Here we just get a line count wich roughly correlates to the number of 
requests that came into NGINx.  We get that for two log files, add them
together and shove that value into our RRDB using &lt;a href=&quot;http://oss.oetiker.ch/rrdtool/&quot;&gt;rrdtool&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;http_value=`/usr/sbin/logtail -f /var/log/nginx/neidetcher.access.log \
   -o /var/log/nginx/.neidetcher.access.log.offset | wc -l`
https_value=`/usr/sbin/logtail -f /var/log/nginx/ssl_neidetcher.access.log \
   -o /var/log/nginx/.ssl_neidetcher.access.log.offset| wc -l`
value=$(($http_value + $https_value))

rrdtool update $rrdfile N:${value}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That capability runs once a minute from cron.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;* * * * * /root/bin/neidetcher_access_log.sh update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;rrdtool graph&lt;/h3&gt;

&lt;p&gt;Now the fun part where we graph the data that we&amp;#39;ve been tracking.  The
first time we get 1 hour worth, the second time we get 24 hours worth.
We move that file into where all my static HTML is for my site and that&amp;#39;s it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;rrdtool graph ./${name}_hour.png \
         --start end-1h \
         DEF:${name}=${rrdfile}:${name}:AVERAGE \
         AREA:${name}#aa5555:${name}
mv -f ./${name}_hour.png ${imageDir}/${name}_hour.png

rrdtool graph ./${name}_day.png \
         --start end-24h \
         DEF:${name}=${rrdfile}:${name}:AVERAGE \
         AREA:${name}#aa5555:${name}
mv -f ./${name}_day.png ${imageDir}/${name}_day.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The graphing runs once a minute as well from cron.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;* * * * * /root/bin/neidetcher_access_log.sh graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What that gets you&lt;/h2&gt;

&lt;p&gt;Okay, lots of stuff there but now we have pretty graphs showing how 
often my site is visited.  As you can see I don&amp;#39;t need to investigate CDN
options just yet.  My &lt;a href=&quot;http://neidetcher.com/metrics.html&quot;&gt;metrics&lt;/a&gt; page shows the
graphs in action.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/demian0311/fc5b45cc901d36889b5e&quot;&gt;My script&lt;/a&gt; gist&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://oss.oetiker.ch/rrdtool/&quot;&gt;RRDTool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fourmilab.ch/webtools/logtail/&quot;&gt;LogTail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://neidetcher.com/metrics.html&quot;&gt;My Metrics Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Play And Akka</title>
   <link href="http://neidetcher.com/programming/2014/04/17/play-and-akka.html"/>
   <updated>2014-04-17T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2014/04/17/play-and-akka</id>
   <content type="html">&lt;p&gt;I took another lab week to stumble around with the &lt;a href=&quot;http://www.playframework.com/&quot;&gt;Play Framework&lt;/a&gt;.  I really 
like the way routing works, the controllers 
are nice and simple.  It has all come a long way
and I wish I could use it for my day job.  If I were
doing a green-field web-app with some APIs I&amp;#39;d likely 
reach for Play.&lt;/p&gt;

&lt;p&gt;I wanted to learn a little bit more about &lt;a href=&quot;https://en.wikipedia.org/wiki/Reactive_programming&quot;&gt;reactive programming&lt;/a&gt;.  I&amp;#39;m not bought in enough to go sign the 
&lt;a href=&quot;http://www.reactivemanifesto.org/&quot;&gt;reactive manifesto&lt;/a&gt; quite yet.  But a lot of smart people seem to be into it so again I thought I&amp;#39;d look into it.  I put 
&lt;a href=&quot;https://github.com/demian0311/ricochet&quot;&gt;this project up on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Actor&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s &lt;a href=&quot;https://github.com/demian0311/ricochet/blob/master/app/actors/PersistorActor.scala&quot;&gt;my actor&lt;/a&gt;.  It uses a Scala object singleton to sort of simulate some 
back-end persistence.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;actors&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;akka.actor.Actor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;utils._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;play.api.mvc.Results&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersistorActor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Actor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerEventPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;GaugePersistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TimerEventPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerEventRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GaugePersistence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TimerEventRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Controller/ Actor Client&lt;/h2&gt;

&lt;p&gt;Below is my Play Framework controller (&lt;a href=&quot;https://github.com/demian0311/ricochet/blob/master/app/controllers/ReactiveGauge.scala&quot;&gt;full source&lt;/a&gt;) that creates a pool of actors.
I&amp;#39;m thankful that &lt;a href=&quot;http://blog.evilmonkeylabs.com/2013/01/17/Distributing_Akka_Workloads_And_Shutting_Down_After/&quot;&gt;Evil Monkey Labs&lt;/a&gt;
posted some code on how to easily create a pool of Actors.
The Akka documentation wasn&amp;#39;t very straight-forward to me.  I have to admit I didn&amp;#39;t
read it end to end, I was doing more random access.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActorSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SimpleSystem&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persistorActor&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ActorRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actorOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PersistorActor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RoundRobinRouter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrOfInstances&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;simpleRoutedActor&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the actor usage example that you always see.  This is async, fire and
forget.  This goes right on a different thread so the actor can do it&amp;#39;s work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;persistorActor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerEventPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;durationOpt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the less than typical way of using actors.  We actually want to get 
a response here.  This uses the implicit timeout from above. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;persistorActor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TimerEventRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SimpleResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;More stuff to learn&lt;/h2&gt;

&lt;p&gt;Here are some things that I think I need to learn with respect to Akka and actors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dependency injection with actors &lt;a href=&quot;http://scaldi.org/Scaldi.html&quot;&gt;scaldi&lt;/a&gt; seems to be a good solution&lt;/li&gt;
&lt;li&gt;creating a hierarchy of actors&lt;/li&gt;
&lt;li&gt;configuring actor pools and dispatching&lt;/li&gt;
&lt;li&gt;remoting Actors&lt;/li&gt;
&lt;li&gt;handling dead letter situations&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Java8 Fizz Buzz</title>
   <link href="http://neidetcher.com/programming/2014/01/17/java8-fizz-buzz.html"/>
   <updated>2014-01-17T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2014/01/17/java8-fizz-buzz</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s my attempt at &lt;a href=&quot;http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html&quot;&gt;FizzBuzz&lt;/a&gt; 
in &lt;a href=&quot;https://jdk8.java.net/download.html&quot;&gt;Java8&lt;/a&gt; with &lt;a href=&quot;http://openjdk.java.net/projects/lambda/&quot;&gt;Lambdas&lt;/a&gt;.  This will 
not go in the Pantheon of awesome code and I&amp;#39;m sure I&amp;#39;ll tweak it as I learn more.  Oh and this is a self-contained 
implementation and unit test, just messing around.&lt;/p&gt;

&lt;p&gt;Here are some thoughts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not sure if there&amp;#39;s a nicer way to do the predicates inline with the &lt;a href=&quot;http://download.java.net/jdk8/docs/api/java/util/stream/IntStream.html&quot;&gt;Stream API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I wish if statements were expressions, that would clean up some of the code. &lt;/li&gt;
&lt;li&gt;It&amp;#39;d be neato if FizzBuzz was conducive to using function composition to do a divBy15 but it isn&amp;#39;t needed for FizzBuzz. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.java.net/jdk8/docs/api/java/util/stream/IntStream.html#range-int-int-&quot;&gt;Ranges&lt;/a&gt; are nice to see.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javafunctional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;examples&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.function.Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.stream.IntStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunctionLiterals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;divBy3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;divBy5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testPredicates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divBy3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divBy5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divBy3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buzz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divBy5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fizz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testFizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IntStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapToObj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fizzBuzz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Book Review Functional Programming In Java</title>
   <link href="http://neidetcher.com/programming/2013/12/29/book-review-functional-programming-in-java.html"/>
   <updated>2013-12-29T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2013/12/29/book-review-functional-programming-in-java</id>
   <content type="html">&lt;p&gt;Venkat is working on &lt;a href=&quot;http://pragprog.com/book/vsjava8/functional-programming-in-java&quot;&gt;Functional Programming in Java&lt;/a&gt;.  The book is still in Beta right now but it&amp;#39;s 
firming up and I&amp;#39;ve finished it over Christmas
break.  This is a great book.  Venkhat really shows you how the new 
features in Java8 will make your code more awesome and how you can play 
with FP concepts.  &lt;/p&gt;

&lt;p&gt;Earlier this I &lt;a href=&quot;/programming/2013/05/14/book-review-functional-programming-for-java-developers.html&quot;&gt;reviewed FP for Java Developers&lt;/a&gt;.  That was good but it pre-dated the 
finalization of the lambda syntax.  If you can&amp;#39;t switch to Java8 and you
want to do FP then look into &lt;a href=&quot;http://www.amazon.com/Functional-Programming-Java-Developers-Concurrency/dp/1449311032&quot;&gt;FP for Java Developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Venkat&amp;#39;s new book lays out the mechanics of lambda expressions and then goes through how to use
them with the collections APIs and high order functions.  Not much else to say about
the book other than if you&amp;#39;re doing Java8 then this book should be required reading.&lt;/p&gt;

&lt;h2&gt;I&amp;#39;m a Simple Man&lt;/h2&gt;

&lt;p&gt;Chapter 7 deals with optimizing recursion.  Chapter 8 is on composing lambda expressions.
Honestly I skimmed those chapters.  After doing the Coursera class on FP in Scala I 
was a recursion monster but at work I still never ended up writing recursive code.
Maybe I&amp;#39;m a knuckle dragger, maybe the problems I solve are work are too simple.
Either way it&amp;#39;s stuff I haven&amp;#39;t had to get good at for my day job.&lt;/p&gt;

&lt;h2&gt;Mini Rant: Of Imperative vs Declarative&lt;/h2&gt;

&lt;p&gt;I know I&amp;#39;m being a bit of a jack-ass here but I don&amp;#39;t get the distinction.  Sure, 
it&amp;#39;s telling the computer &lt;em&gt;how&lt;/em&gt; to do something as opposed to &lt;em&gt;what&lt;/em&gt; you want it
to do.  But I see this as more of a difference in degree and not as much a difference
in kind.  It just seems like what we are calling declarative programming is just 
further up the API design continuum away from bad and cumbersome APIs.   &lt;/p&gt;

&lt;p&gt;So, in Java8 we say that the collection APIs and the ability to use lambdas
creates more declarative code.  I just kind of see it as having more awesome APIs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review Phoenix Project</title>
   <link href="http://neidetcher.com/programming/2013/12/04/book-review-phoenix-project.html"/>
   <updated>2013-12-04T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2013/12/04/book-review-phoenix-project</id>
   <content type="html">&lt;p&gt;This book is about an IT manager.  I don&amp;#39;t want to give spoilers because
even though the book isn&amp;#39;t perfect I think that anyone in the software
business should read it.  To that end I don&amp;#39;t want to ruin the book for 
you.&lt;/p&gt;

&lt;h2&gt;The Good&lt;/h2&gt;

&lt;p&gt;In many of the situations that came up in the book I was reminded of
very similar things that have happened to me in my career.  The situations
were similar in the technical nature of what happened.  They all seemed
very plausible and relatable.&lt;/p&gt;

&lt;p&gt;There were also things that happened that were driven by the business that
felt familiar.  Companies and IT departments often find themselves doing
sub-optimal things for very compelling reasons.  Again, these types of
situations were very relatable.&lt;/p&gt;

&lt;p&gt;The book is well crafted to translate the lean practices from manufacturing
into software.  It all lines up a little bit too nice but it is quite
instructional.&lt;/p&gt;

&lt;h2&gt;The Bad&lt;/h2&gt;

&lt;p&gt;Even if you get it, the likelyhood that you will end up in an organization
that is receptive to some good lean and devops practices is remote.  It&amp;#39;s
even more remote that you will find yourself in the right position in such
a company. &lt;/p&gt;

&lt;h2&gt;The Conclusion&lt;/h2&gt;

&lt;p&gt;Even if you won&amp;#39;t be able to change your IT organization the week after you
read this book I still think you should read this book.  You should get as
many of your co-workers to read this book as possible.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Around Groovy Linkage Error</title>
   <link href="http://neidetcher.com/programming/2013/10/17/getting-around-groovy-linkage-error.html"/>
   <updated>2013-10-17T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2013/10/17/getting-around-groovy-linkage-error</id>
   <content type="html">&lt;h2&gt;A Hystrix Grails Plugin&lt;/h2&gt;

&lt;p&gt;I am trying my hand at &lt;a href=&quot;https://github.com/demian0311/hystrix-circuit-breaker&quot;&gt;creating a Grails plugin&lt;/a&gt;
that will pull in the 
&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot;&gt;Netflix Hystrix circuit breaker&lt;/a&gt; 
capability in your &lt;a href=&quot;http://grails.org/&quot;&gt;Grails&lt;/a&gt; application.
I have never written Grails plugins before.  Holy cow writing Grails 
plugins is surprisingly straightforward.  It&amp;#39;s awesome. &lt;/p&gt;

&lt;p&gt;Part of the reason I&amp;#39;m doing this is because we finally stumbled onto
the fact that using Grails plugins to manage your common code in an
enterprise is a good idea.  So we&amp;#39;re doing that at work.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m doing this with Netflix Hystrix because we use circuit breakers
at work in our Scala services.  Also, I am working on a talk to give in 2014 about
how to harden your application with respect to outgoing calls and the
concerns you should have with that.  Yes, I think &lt;a href=&quot;https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern&quot;&gt;circuit breakers&lt;/a&gt;
are one of those concerns you should have.&lt;/p&gt;

&lt;p&gt;Integrating the Hystrix into a Grails plugin has been fun and surprisingly easy.
The hooks that Grails gives you for hacking at the web.xml file are nice.  My 
problems began when I wanted to configure my newly created circuit breaker.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Groovy has a &lt;a href=&quot;https://jira.codehaus.org/browse/GROOVY-6286&quot;&gt;known problem (Cannot call Java static method with same name as inner class (LinkageError))&lt;/a&gt;.
It&amp;#39;s amusing that the author of that issue was attempting to do the
same thing I am; configure the Netflix Hystrix API.  I&amp;#39;m not sure how common 
it is to have a static method with the same name as an inner class.&lt;/p&gt;

&lt;p&gt;The offending class is &lt;a href=&quot;http://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/HystrixCommandProperties.html&quot;&gt;HystrixCommandProperties&lt;/a&gt;.
If you search that page for &lt;em&gt;Setter&lt;/em&gt; you&amp;#39;ll see the inner class and 
the static factory method they want you to use to create a new one.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  LinkageError occurred when processing request: [GET] /hystrix-circuit-breaker/test
  loader constraint violation: when resolving method &amp;quot;com.netflix.hystrix.HystrixCommandProperties.Setter()Lcom/netflix/hystrix/HystrixCommandProperties$Setter;&amp;quot; the class loader (instance of org/codehaus/groovy/runtime/callsite/CallSiteClassLoader) of the current class, com/netflix/hystrix/HystrixCommandProperties$Setter, and the class loader (instance of groovy/lang/GroovyClassLoader) for resolved class, com/netflix/hystrix/HystrixCommandProperties, have different Class objects for the type com/netflix/hystrix/HystrixCommandProperties$Setter used in the signature. Stacktrace follows:
  org.codehaus.groovy.grails.web.servlet.mvc.exceptions.ControllerExecutionException: Executing action [index] of controller [hystrix.circuit.breaker.TestController] in plugin [hystrix-circuit-breaker] caused exception: Runtime error executing action
     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
     at java.lang.Thread.run(Thread.java:680)
  Caused by: org.codehaus.groovy.grails.web.servlet.mvc.exceptions.ControllerExecutionException: Runtime error executing action
    ... 3 more
  Caused by: java.lang.reflect.InvocationTargetException
    ... 3 more
  Caused by: java.lang.LinkageError: loader constraint violation: when resolving method &amp;quot;com.netflix.hystrix.HystrixCommandProperties.Setter()Lcom/netflix/hystrix/HystrixCommandProperties$Setter;&amp;quot; the class loader (instance of org/codehaus/groovy/runtime/callsite/CallSiteClassLoader) of the current class, com/netflix/hystrix/HystrixCommandProperties$Setter, and the class loader (instance of groovy/lang/GroovyClassLoader) for resolved class, com/netflix/hystrix/HystrixCommandProperties, have different Class objects for the type com/netflix/hystrix/HystrixCommandProperties$Setter used in the signature
    at hystrix.circuit.breaker.DodgyStringReverser.createSetter(TestController.groovy:31)
    at hystrix.circuit.breaker.DodgyStringReverser.&amp;lt;init&amp;gt;(TestController.groovy:36)
    at hystrix.circuit.breaker.TestController.index(TestController.groovy:18)
    ... 3 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Groovy is the king of wild-ass options to call stuff so I thought 
I would try a bunch of different possibilities to see if they get me
around this issue.  I won&amp;#39;t show all the ways that didn&amp;#39;t work. 
Here&amp;#39;s the way that seems to work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  static HystrixCommandProperties.Setter createHystrixCommandPropertiesSetter(){
      HystrixCommandProperties.invokeMethod(&amp;quot;Setter&amp;quot;, null)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a href=&quot;https://github.com/demian0311/hystrix-circuit-breaker/blob/master/grails-app/controllers/hystrix/circuit/breaker/TestController.groovy&quot;&gt;here&amp;#39;s a link to my silly example that proves the concept&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Beginning Cryptography With Java</title>
   <link href="http://neidetcher.com/programming/2013/09/27/beginning-cryptography-with-java.html"/>
   <updated>2013-09-27T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2013/09/27/beginning-cryptography-with-java</id>
   <content type="html">&lt;h2&gt;Getting my Ass Handed to Me&lt;/h2&gt;

&lt;p&gt;At work our PCI compliant Grails application needs to make 2-way SSL calls to
another PCI compliant SOAP service.  Well you know this is gonna kind of suck
for a little bit, you have to assume it&amp;#39;ll take a few days to get everything
set up right.  It turned out that it took me a few weeks to get all this done.&lt;/p&gt;

&lt;p&gt;I had some legit distractions in that time but it took me much longer than it
should have.  What hurts even more is that the main issue I had was nothing to
do with SSL.  However, the lack of knowledge and confidence in SSL kind of 
prevented me from seeing my problems clearly.&lt;/p&gt;

&lt;p&gt;The recent &lt;a href=&quot;https://en.wikipedia.org/wiki/PRISM_(surveillance_program&quot;&gt;NSA/ PRISM&lt;/a&gt;)
scandal has me a bit more interested in privacy and security.  Digging into
the security APIs and the pieces involved gave me a greater appreciation for
current events.&lt;/p&gt;

&lt;h2&gt;Let&amp;#39;s Learn Me Some Security&lt;/h2&gt;

&lt;p&gt;So I resolved to learn more about security and SSL as it applies to the JVM 
platform.  Honestly I initially thought I would take the Coursera class
&lt;a href=&quot;https://www.coursera.org/course/crypto&quot;&gt;Cryptography I&lt;/a&gt;.  But the math 
notation scared me and I was concerned that after investing 6 weeks of my
time I still wouldn&amp;#39;t know the Java APIs very well or have a solid 
practical understanding.  &lt;/p&gt;

&lt;p&gt;I decided to just crack a book on my own and learn some Java security.  It&amp;#39;s
a weird space in that there hasn&amp;#39;t been a lot of advancement in the APIs.  I 
guess that means that they created the initial APIs for Java well enough
such that there isn&amp;#39;t any serious churn.&lt;/p&gt;

&lt;p&gt;That lead me to a 2005 dead-tree book &lt;a href=&quot;http://www.wrox.com/WileyCDA/WroxTitle/Beginning-Cryptography-with-Java.productCd-0764596330.html&quot;&gt;Beginning Cryptography with Java&lt;/a&gt;.
As far as I know you can&amp;#39;t even get it in an electronic version but that was
alright because I had some trips ahead of me and it was something I could read
to keep my mind off of the impending doom from airplane take-offs and landings.&lt;/p&gt;

&lt;h2&gt;Affirmation that Scala is Cool&lt;/h2&gt;

&lt;p&gt;The book is in Java, 2005.  At my day job I do Scala and Groovy.  I decided to
do the examples.  The process of implementing the Java examples in Scala was
surprisingly fun and re-affirmed how flippin awesome Scala is.  Code shrunk
and became more expressive, got to the core of what we were doing.&lt;/p&gt;

&lt;p&gt;If you want to look at a few of the examples I did they&amp;#39;re &lt;a href=&quot;https://github.com/demian0311/security&quot;&gt;up on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Intellij Is Good</title>
   <link href="http://neidetcher.com/programming/2013/07/12/intellij-is-good.html"/>
   <updated>2013-07-12T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2013/07/12/intellij-is-good</id>
   <content type="html">&lt;p&gt;This seems to be a theme lately where I&amp;#39;m late to the party, taking a long time
to &lt;em&gt;get&lt;/em&gt; something that is common knowledge to most folks.&lt;/p&gt;

&lt;h2&gt;Groovy / Grails Support&lt;/h2&gt;

&lt;p&gt;I was beating my head against the wall using &lt;a href=&quot;http://grails.org/products/ggts&quot;&gt;GGTS&lt;/a&gt;.
For example it was astonishing to me that GGTS didn&amp;#39;t understand that I should have a 
&lt;a href=&quot;http://grails.org/doc/2.2.1/ref/Servlet%20API/request.html&quot;&gt;request&lt;/a&gt; available to me 
while working with Controllers.  No code completion, I was all on my own.  GGTS 
couldn&amp;#39;t help me out at all.  Man I hope it&amp;#39;s a PEBKAC problem but I couldn&amp;#39;t get it working.&lt;/p&gt;

&lt;p&gt;So I bit the bullet and started evaluating the newest version of IntelliJ.  After meeting
some resistance[^1] at work to justify the expense 
I decided to pay for a license out
of my own pocket.  That&amp;#39;s how good I think it has been for my productivity.&lt;/p&gt;

&lt;h2&gt;Scala and PlayFramework Support&lt;/h2&gt;

&lt;p&gt;What I have done in my day job is use the &lt;a href=&quot;http://scala-ide.org/&quot;&gt;TypeSafe Scala IDE&lt;/a&gt; 
for my Scala programming.  Really that wasn&amp;#39;t going too bad at all.  TypeSafe is 
dog-fooding it and they&amp;#39;re doing a pretty good job.  &lt;/p&gt;

&lt;p&gt;IntelliJ also has great support for Scala and the PlayFramework.  After hours I&amp;#39;m playing
with Play, no complaints there.&lt;/p&gt;

&lt;p&gt;I haven&amp;#39;t fully pulled in our large Scala code-base at work quite yet.  We&amp;#39;ll see how that
goes, not expecting much trouble.&lt;/p&gt;

&lt;h2&gt;Productivity Boosters&lt;/h2&gt;

&lt;p&gt;One of the big things to re-map &amp;#8984;-R to re-run my last tests.  I do that in
Eclipse and it works out really good.  I&amp;#39;m a very proficient with the keyboard but
day to day the function keys are dead to me.&lt;/p&gt;

&lt;p&gt;Another big thing that has been helpful is the &lt;a href=&quot;http://plugins.jetbrains.com/plugin/164&quot;&gt;IdeaVim&lt;/a&gt;
plugin.  It&amp;#39;s 95% perfect for me.  I&amp;#39;m real quick to get around using it.  The last
5% that doesn&amp;#39;t work the way I want is really just indenting and outdenting a block
of text.  It doesn&amp;#39;t work the same way VIM does.  It&amp;#39;s great to be able to keep my
brain in VIM mode.&lt;/p&gt;

&lt;p&gt;[^1]: It&amp;#39;s not quite as bad as it sounds, they paid for an older version of IntelliJ for me
previously but I wanted them to pay for the latest version.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Book Review Functional Programming For Java Developers</title>
   <link href="http://neidetcher.com/programming/2013/05/14/book-review-functional-programming-for-java-developers.html"/>
   <updated>2013-05-14T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2013/05/14/book-review-functional-programming-for-java-developers</id>
   <content type="html">&lt;p&gt;First off, this is a small book.  72 pages including a glossary.  I was able to read
it on a plne ride from Louisiana to Denver.  Like the tagline says, I hope I never
need this book.  &lt;/p&gt;

&lt;p&gt;As the title suggests, the book is about making Java more functional.  On my team 
we spend half our time in Groovy and half on Scala.  I suppose we 
have done similar things in Groovy.   The support that Groovy has for 
closures makes it easier than it would have been in Java.&lt;/p&gt;

&lt;p&gt;He also covers what is coming in Java for more FP features like closures.  The 
syntax looks clunky but I could see living with it if I had no choice.  &lt;/p&gt;

&lt;p&gt;I found the book useful in reviewing and appreciating where I&amp;#39;m at.  How things 
were in Java and how nice things are in Scala.  Even if you don&amp;#39;t need to do 
functional programming in Java right now I think this book is a good read.
If my current gig fell apart and I had to do Java fulltime then I would
grab this book to keep my sanity.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>In Praise Of The Full Time Employee</title>
   <link href="http://neidetcher.com/programming/2013/03/17/in-praise-of-the-full-time-employee.html"/>
   <updated>2013-03-17T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2013/03/17/in-praise-of-the-full-time-employee</id>
   <content type="html">&lt;p&gt;As software engineeers we have to turn our attention to thought leaders.
These might be consultants, blog authors, book authors, speakers, software authors.
Usually they have short engagements with companies.  Their skills run deep into 
their chosen technologies.&lt;/p&gt;

&lt;p&gt;I think it&amp;#39;s right for us to look up to these guys and to use them as resources.  But I also think we tend to overlook the FTE of the software world.  Their 
careers might not be as sexy, they might not work with the latest technologies 
but they deserve some recognition.&lt;/p&gt;

&lt;p&gt;From the outset here I gotta say this is self serving.  I&amp;#39;m a working stiff
FTE.  I&amp;#39;ve thought about contracting a few times in my career but I always found
a reason to chicken out.  So this is in no way a condemnation of consultants that
specialize in specific technology for short term engagements.  &lt;/p&gt;

&lt;p&gt;What&amp;#39;s more, I consider many of those very guys friends, occasional drinking
buddies and dare I say mentors.  Scott Davis, Tim Berglund, Matthew McCullough.&lt;/p&gt;

&lt;h2&gt;Intellectual Property&lt;/h2&gt;

&lt;p&gt;When companies talk about their intellectual property they probably don&amp;#39;t think
of their software engineers.  I think this is a mistake.  In many aspects of the
business no one knows how things get done like software engineers.  No one knows
the algorithms, where the data comes from and who the data goes to like the
software engineers.  If you run a business, your software engineers that are 
full time employees are your intellectual property.&lt;/p&gt;

&lt;h2&gt;Fixing the Disfunction&lt;/h2&gt;

&lt;p&gt;Full time employees know that just as they are going to have to live in a code
base they are also going to have to live in an organizational chart.  They care
more about hiring the right team members.  They care about pulling other team 
members up.  They also care about establishing long-term relationships within
the organization that benefit the company.&lt;/p&gt;

&lt;h2&gt;Sleeping in Your Own House&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;ve had a career of living with your own software, design, architecture and
coding decisions then you go about these decisions differently.  By &amp;#39;living with&amp;#39;
I mean that you are present for the inception of a project, the initial development
and you are around to support the software for a few years.  If you&amp;#39;ve done that
a few times in your career I think you get an appreciation for the impact of
decisions.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;I hate to take the steam out of my argument but I have to say that in each one 
of these areas I&amp;#39;ve seen short-term contractors have a positive effect. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Smoke Tests For Your System</title>
   <link href="http://neidetcher.com/programming/2013/02/24/smoke-tests-for-your-system.html"/>
   <updated>2013-02-24T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2013/02/24/smoke-tests-for-your-system</id>
   <content type="html">&lt;p&gt;Me and another team member took our most recent lab week to do something incredibly un-sexy.  Our resumes have no new libraries, buzz-words or languages that we can add.  We decided to use some old-school tools to create a very tactical set of smoke tests for our system and for the back-end systems that we depend on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/neidetcher/8546486548/&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8378/8546486548_66de3d31dc.jpg&quot; alt=&quot;smoke_test_console&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our system is used by many clients.  When we get requests we then turn around and talk to about 20 different back-end systems.  Many times we are caught in the middle when there are anomalies found by our clients.  When this happens we have to turn to the logs to see if there&amp;#39;s a problem with a system we depend on.  We also didn&amp;#39;t have much visibility when our systems were not acting as they should. The principle is this.  Create a shell script that will run a bunch of other shell scripts in a directory.  If the script sends back an exit status that is bad (other than 1) we will consider that test failed.  The runner has a simple check for that and will echo PASS/ FAIL based on what we get back.  We also color the text green or red based on the results.  3/4 of my career has been about making red things green. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/neidetcher/8546486586/&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8531/8546486586_752877ecc9.jpg&quot; alt=&quot;smoke_test_html&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output is so simple that my wife looked at a screen with a bunch of red and said, &amp;quot;that doesn&amp;#39;t look good.&amp;quot;  I&amp;#39;m not sure if we&amp;#39;ll opensource it, there isn&amp;#39;t much intellectual property to speak of.  We decided to set up the scripts to run in a cron job once an hour and generate an HTML report showing the same type of data.&lt;/p&gt;

&lt;p&gt;We set a low bar on the smoke tests, sometimes they use cURL to POST a SOAP request and we just look at the response to see a specific piece of information is present.  Sometimes we just use NMAP to convince us that the port is warm on the far end and NMAP at least thinks it&amp;#39;s the right type of application.  The idea is that these tests should be written in 5 minutes.&lt;/p&gt;

&lt;p&gt;We&amp;#39;re not sure how these will be used.  We hope that folks that support operations (including developers) will see new problems that come up not only as an opportunity to diagnose the matter at hand but to also add another smoke test that will give us a more clear indication of the problem the next time around. &lt;/p&gt;

&lt;p&gt;This was an incredibly tactical bit of software that won&amp;#39;t win us any design awards but it has already paid off a handful of times.  I regret that we didn&amp;#39;t put something together like this sooner.  &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Maven3 Maven2 Mixup On Mac</title>
   <link href="http://neidetcher.com/programming/2013/01/05/maven3-maven2-mixup-on-mac.html"/>
   <updated>2013-01-05T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2013/01/05/maven3-maven2-mixup-on-mac</id>
   <content type="html">&lt;p&gt;At first my Mac was all:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  ~/opt/maven/bin&amp;gt;mvn --version  
  Exception in thread &amp;quot;main&amp;quot; java.lang.NoClassDefFoundError: org/codehaus/plexus/classworlds/launcher/Launcher  
  Caused by: java.lang.ClassNotFoundException: org.codehaus.plexus.classworlds.launcher.Launcher  
  at java.net.URLClassLoader$1.run(URLClassLoader.java:202)  
  at java.security.AccessController.doPrivileged(Native Method)  
  at java.net.URLClassLoader.findClass(URLClassLoader.java:190)  
  at java.lang.ClassLoader.loadClass(ClassLoader.java:306)  
  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)  
  at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then I&amp;#39;m like (in my ~/.bashrc)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  export M3_HOME=$OPT/maven  
  export M2\_HOME=$M3\_HOME  
  export PATH=$M3_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now it&amp;#39;s all:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;  ~/opt/maven/bin&amp;gt;./mvn --version  
  Apache Maven 3.0.4 (r1232337; 2012-01-17 02:44:56-0600)  
  Maven home: /Users/demian/opt/maven  
  Java version: 1.6.0_37, vendor: Apple Inc.  
  Java home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home  
  Default locale: en_US, platform encoding: MacRoman  
  OS name: &amp;quot;mac os x&amp;quot;, version: &amp;quot;10.8.2&amp;quot;, arch: &amp;quot;x86_64&amp;quot;, family: &amp;quot;mac&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Java Jdk 1.7 On Mac 1.8.2</title>
   <link href="http://neidetcher.com/programming/2012/12/14/java-JDK-1.7-on-mac-1.8.2.html"/>
   <updated>2012-12-14T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2012/12/14/java-JDK-1.7-on-mac-1.8.2</id>
   <content type="html">&lt;p&gt;I have been doing Scala and Groovy at the day job for about a year now.  For some side work I thought I&amp;#39;http://neidetcher.blogspot.comd use Java, there obviously aren&amp;#39;http://neidetcher.blogspot.comt enough semi-colons in my life.  I haven&amp;#39;http://neidetcher.blogspot.comt touched 1.7 yet and setting it up on my Mac wasn&amp;#39;http://neidetcher.blogspot.comt incredibly intuitive.  &lt;/p&gt;

&lt;p&gt;I had to do more poking around to arrive at this than I wish I had to.  &lt;/p&gt;

&lt;p&gt;Finding the actual download from Oracle is easy.  &lt;/p&gt;

&lt;p&gt;After installing Java 1.7 from Oracle I added this to my ~/.bashrc to actually use it.  Not sure if the install should&amp;#39;http://neidetcher.blogspot.comve done this or if I missed some steps I was supposed to take.  &lt;/p&gt;

&lt;p&gt;export JRE_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_10.jdk/Contents/Home/&lt;br&gt;
  export JAVA_HOME=$JRE_HOME&lt;br&gt;
  export JDK_HOME=$JRE_HOME&lt;br&gt;
  export PATH=$JAVA_HOME/bin:$PATH  &lt;/p&gt;

&lt;p&gt;And holy cow Oracle does not make it easy to find out how to download the JDK 1.7 API documentation.  Got to have it local for coding on an airplane.  &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Another Look At Play2</title>
   <link href="http://neidetcher.com/programming/2012/11/19/another-look-at-play2.html"/>
   <updated>2012-11-19T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2012/11/19/another-look-at-play2</id>
   <content type="html">&lt;h1&gt;Neidetcher: Another Look at Play2&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.playframework.org/assets/images/logos/normal.png&quot;&gt;&lt;img src=&quot;http://www.playframework.org/assets/images/logos/normal.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://raibledesigns.com/rd/search?q=play&quot;&gt;Matt Raible has some good writeups on Play2&lt;/a&gt;.  We switched to Scala about a year ago.  For lab week, a few of us evaluated Play earlier this year.  At the time I mostly worked with the persistence layer, &lt;a href=&quot;https://github.com/playframework/Play20/wiki/ScalaAnorm&quot;&gt;anorm&lt;/a&gt;.  Our conclusion was that it wasn&amp;#39;t quite ready for what we wanted to do. 
Just recently I finished a lab week and decided to take another look at Play.  Here are some conclusions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overall&lt;/strong&gt;&lt;br&gt;
The big question is, compared to what.  At work we use Grails on the web side and Scala on the back-end.  The reality is that we leverage front-end engineers to help us make Time Warner Cable web sites look and behave well.  In our situation I don&amp;#39;t think I can recommend it.  But if you&amp;#39;re in a hardcore Scala shop and your Scala engineers can do enough of the front-end work then Play might be a good option.&lt;/p&gt;

&lt;p&gt;Working with routes and templates felt a lot like Android development.  You work in a non-code DSL to create your routes and that turns into code that you write against.  Same for templates, they just turn into functions.  sbt run fires up their own netty server, it&amp;#39;s solid.  It does a great job picking up changes. I didn&amp;#39;t restart the play development server for a few days and it didn&amp;#39;t miss anything.  Play also gives you helpful error messages in the browser when there are problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Routes&lt;/strong&gt;&lt;br&gt;
They&amp;#39;re handled in a text file.  I guess it&amp;#39;s good because there&amp;#39;s no cruft surrounding the definition of your routes.  It&amp;#39;s bad because I think Scala is the perfect language for defining an internal DSL to handle routes.  It&amp;#39;d be great to have IDE support while working with routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Controllers&lt;/strong&gt;&lt;br&gt;
Everything feels very idiomatic to Scala.  For example optional parameters are (drum-roll) Options.  Play doesn&amp;#39;t have you use servlet filters, you just wrap functions.  The controllers themselves are not easy to test but there are workarounds such that you can do good unit tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Templating&lt;/strong&gt;&lt;br&gt;
It&amp;#39;s familiar to someone used to Scala.  Templates are just functions and have input parameters with types.  This gets statically checked and your IDE will bark at you if you send the wrong data type into a template.  I think that&amp;#39;s awesome.  The templating is not as rich as Groovy Server Pages.  For the actual templating work there is no good IDE support.  It&amp;#39;d be great if TypeSafe took this on.  The templating that Play gives you would be painful for front-end engineers that are only familiar with HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;br&gt;
They have utilities to help with testing.  All the examples use Specs, I haven&amp;#39;t got the Specs memo yet, still using jUnit (get off my porch).  The biggest problem is that the controllers are objects so it&amp;#39;s hard to do good unit testing.  I found a workaround that someone suggested.  Basically your controller is a class, in this case taking a dependency via the constructor.  Then the object that you tell Play about in the routes extends that class.  This seems to work in my toy example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;object MockUp extends controllers.MockUp(new ProductionGuidCryptoServiceProvider()) {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Functional Programming Principles In Scala</title>
   <link href="http://neidetcher.com/programming/2012/11/09/functional-programming-principles-in-scala.html"/>
   <updated>2012-11-09T00:00:00-06:00</updated>
   <id>http://neidetcher.com/programming/2012/11/09/functional-programming-principles-in-scala</id>
   <content type="html">&lt;h1&gt;Functional Programming Principles in Scala&lt;/h1&gt;

&lt;p&gt;So here&amp;#39;s the deal, I was dreading the thought of doing another assignment in the Odersky Scala course on Coursera.  I have other projects I want to move on to and man I&amp;#39;m not built for the academic side.  Then they send out an email telling everyone the minimum number of points we need to complete the course.  Alt-tab over to a Google Doc spreadsheet, do some quick math and presto, I have way more than enough points.  So, I punted on the last assignment.  Yep, I&amp;#39;m that guy, I wrapped up my CS degree with a D in post-calc stats to get the diploma.  That&amp;#39;ll work.
Besides my weak finish the course was awesome.  If you&amp;#39;re in the Scala space and you are anything short of a wizard I don&amp;#39;t understand why you wouldn&amp;#39;t jump on the opportunity to get instruction from Martin Odersky himself. &lt;/p&gt;

&lt;h4&gt;The Course The focus of the course, as you would imagine, is functional programming.  They take much inspiration from&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://mitpress.mit.edu/sicp/&quot;&gt;SICP&lt;/a&gt;.  I don&amp;#39;t know how much of it was SICP or Martin Odersky himself but the course laid out the proper motivation and revelation of information such that my brain was willing and able to accept it.  This was a well thought out, professional course. 
50,000 people signed up for the course.  I don&amp;#39;t know how many people finished it.  The course developers created an automated system that analyzed your code to make sure it passed their own tests along with some other code analysis.  For example I had some code implemented that passed tests but it didn&amp;#39;t use the &lt;em&gt;groupBy&lt;/em&gt; capability in collections.  That was the point of the exercise so they dinged me.  Fair enough, they&amp;#39;re checking lots of stuff.&lt;/p&gt;

&lt;p&gt;Because of the automated nature, the programming assignments have to structured in a particular way.  They have to lead you down a path.  They can&amp;#39;t just give you an assignment and a blank canvas.  I think this is okay.  But it&amp;#39;s a different approach to programming assignments and worth recognizing.  &lt;/p&gt;

&lt;h4&gt;To Those That Come After Here are some things I recommend to someone taking the course when it is offered next.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  Get the SICP book and refer to it, it helped a few times.  Odersky mentions it and I think it&amp;#39;s fair game to refer to it.&lt;/li&gt;
&lt;li&gt;  I didn&amp;#39;t do any of the video quizes, I don&amp;#39;t think it hurt me.&lt;/li&gt;
&lt;li&gt;  Leverage the Scala-IDE worksheet, dump code in there and play, I think it&amp;#39;s better than the REPL.&lt;/li&gt;
&lt;li&gt;  The forums were sometimes (not very often) helpful.&lt;/li&gt;
&lt;li&gt;  Submit early and often.  You get great feedback.  Some co-workers found that if you put print statements in your code you&amp;#39;ll see the output in the online feedback, this can give you some indications of the additional test scenarios they are using to evaluate your code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;The Cheating 9 co-workers and myself have our own Skype room dedicated to the course.  No one wanted to cheat, we all wanted to get a lot out of the class.  We even made sure that no one gave away&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;spoilers&lt;/em&gt; before the projects were due.  But we also knew that we would benefit greatly by looking at each others work when we were done with assignments.  I actually learned some cool stuff and it was a great time for me to accept the information since I just got done spending hours trying to solve the same problem.  So I was one of the guys that had his assignments up on &lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;. 
Then we get the email from the admins that we need to take it down.  That&amp;#39;s all cool but they cited how we signed an agreement acknowledging we wouldn&amp;#39;t post our stuff or whatever.  I wish you could see my face but let&amp;#39;s just say, &lt;strong&gt;no one fuckin reads EULAs&lt;/strong&gt;.  If you don&amp;#39;t already know that, especially if you&amp;#39;re in software I&amp;#39;m not sure what to say.  So I took it down from &lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt; and put it on a private repo on &lt;a href=&quot;https://bitbucket.org/&quot;&gt;bitbucket&lt;/a&gt;.  If you don&amp;#39;t already know, you get free private git repos from &lt;a href=&quot;https://bitbucket.org/&quot;&gt;bitbucket&lt;/a&gt;, good stuff.&lt;/p&gt;

&lt;h4&gt;On From Here I&amp;#39;m doing things out of order here but I&amp;#39;m going to go through the Scala Koans from here.  Just to loop back and go thru the basics some more.  In the forums the course administrators say they plan on offering additional Scala classes through Coursera.  I look forward to seeing what they offer.&lt;/h4&gt;
</content>
 </entry>
 
 <entry>
   <title>Spare Box Ci</title>
   <link href="http://neidetcher.com/programming/2012/09/17/spare-box-ci.html"/>
   <updated>2012-09-17T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2012/09/17/spare-box-ci</id>
   <content type="html">&lt;p&gt;I have 2 employer provided computers.  One is a Mac Book Pro, the other is a Mac Pro.  I do my day to day development on the MBP because I want a smooth transition when I&amp;#39;m on the road.  I do this even though the desktop is a beast.  At home I use ShareMouse (a software KVM) so that the computers almost seem as one.  The desktop streams music from Pandora, has all the IM and email clients.&lt;/p&gt;

&lt;p&gt;I still wanted to leverage the desktop for my workflow.  The setup I have allows me to run CI unit tests against my local (laptop) git repo.  I&amp;#39;ll make changes, commit them and then the desktop will poll my laptop to see if there is anything new.  If there is something new then it does a full build and unit test.  I can continue doing other tasks on the laptop while the desktop is churning through our scala project (compiling scala code is resource intensive).  Then when I see that the build is in good shape I&amp;#39;ll do a push to our team GitHub Enterprise Server.&lt;/p&gt;

&lt;h3&gt;On your laptop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tell git it&amp;#39;s okay to export your project by touching this file: &lt;code&gt;&amp;lt;path-to-project&amp;gt;/.git/git-daemon-export-ok&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Serve up my local repo &lt;code&gt;git daemon --verbose --base-path=&amp;lt;path-to-project&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;On your desktop&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install Jenkins on the desktop&lt;/li&gt;
&lt;li&gt;Point desktop Jenkins to your git repo: &lt;code&gt;git://&amp;lt;your-network-ip&amp;gt;/.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Scala Encoding Fun</title>
   <link href="http://neidetcher.com/programming/2012/03/15/scala-encoding-fun.html"/>
   <updated>2012-03-15T00:00:00-05:00</updated>
   <id>http://neidetcher.com/programming/2012/03/15/scala-encoding-fun</id>
   <content type="html">&lt;p&gt;I pulled a toy Scala &lt;a href=&quot;https://github.com/demian0311/scalakata&quot;&gt;project&lt;/a&gt; into Eclipse and saw this 
problem:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;IO error while decoding [file].scala with UTF-8 Please try specifying another one using the -encoding option
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://p5wscala.wordpress.com/tag/encoding/&quot;&gt;This guy&lt;/a&gt; didn&amp;#39;t have the exact solution but he got me pointed in the right direction.  The problem is that 
I must have copied in some non-UTF-8 characters into my source code.  At this point the Scala compiler
got confused.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a bunch of shell commands I did to fix the problem:&lt;/p&gt;

&lt;h3&gt;Figure out the character set of the file we&amp;#39;re having trouble with&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;~/code/scalakata&amp;gt;file -I ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala
./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala: text/x-java; charset=iso-8859-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yep, the old iso-8859-1, that&amp;#39;s not what we want.  That&amp;#39;s what we use as the &lt;em&gt;from&lt;/em&gt; encoding.&lt;/p&gt;

&lt;h3&gt;Make a copy of the offending file UTF-8&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;~/code/scalakata&amp;gt;iconv -f iso-8859-1 -t utf-8 ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala &amp;gt; ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala.utf8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The diff command will show you what the offending line was&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;~/code/scalakata&amp;gt;diff ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala.utf8
134c134
&amp;lt;       // 4) Scala lets you multiply a string with a number?try out &amp;quot;crazy&amp;quot; * 3 in the REPL. What does this operation do? Where can you find it in Scaladoc?
---
&amp;gt;       // 4) Scala lets you multiply a string with a numberÑtry out &amp;quot;crazy&amp;quot; * 3 in the REPL. What does this operation do? Where can you find it in Scaladoc?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Now actually replace the old file&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;~/code/scalakata&amp;gt;mv ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala.utf8 ./src/test/scala/com/neidetcher/sfti/Chapter1Test.scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that I was back in business.&lt;/p&gt;
</content>
 </entry>
 

</feed>
